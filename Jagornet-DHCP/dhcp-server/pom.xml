<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.jagornet</groupId>
    <artifactId>jagornet-dhcp-all</artifactId>
    <!-- See parent pom for revision -->
    <version>${revision}</version>
  </parent>

  <artifactId>jagornet-dhcp-server</artifactId>
  
  <properties>
    <!-- Default to NOT build Docker image -->
  	<skip.jib>true</skip.jib>
  	<commons.cli.version>1.2</commons.cli.version>
  	<commons.dbcp2.version>2.7.0</commons.dbcp2.version>
  	<commons.io.version>2.7</commons.io.version>
  	<commons.pool2.version>2.7.0</commons.pool2.version>
  	<dnsjava.version>2.1.9</dnsjava.version>
  	<netty.version>4.1.48.Final</netty.version>
  	<spring.version>5.3.20</spring.version>
  	<derby.version>10.14.2.0</derby.version>
  	<h2.version>2.1.210</h2.version>
  	<sqlite.jdbc.version>3.30.1</sqlite.jdbc.version>
  	<jersey.version>2.30</jersey.version>
  	<jaxb.api.version>2.3.1</jaxb.api.version>
  	<jaxb.core.version>2.3.0.1</jaxb.core.version>
  	<jaxb.runtime.version>2.3.2</jaxb.runtime.version>
  	<activation.version>1.1.1</activation.version>
  	<javax.annotation.version>1.3.2</javax.annotation.version>
  	<httpclient.version>4.5.13</httpclient.version>
  	<jackson.version>2.11.2</jackson.version>
  	<swagger.version>2.1.13</swagger.version>
  </properties>

  <dependencies>
  	<dependency>
  		<groupId>com.jagornet</groupId>
  		<artifactId>jagornet-dhcp-core</artifactId>
	    <!-- 
	    See 'project.version' here - https://maven.apache.org/maven-ci-friendly.html
	     -->
  		<version>${project.version}</version>
  	</dependency>
  	
  	<!-- Apache Commons -->
	<dependency>
	    <groupId>commons-cli</groupId>
	    <artifactId>commons-cli</artifactId>
	    <version>${commons.cli.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.apache.commons</groupId>
	    <artifactId>commons-dbcp2</artifactId>
	    <version>${commons.dbcp2.version}</version>
	</dependency>
	<dependency>
	    <groupId>commons-io</groupId>
	    <artifactId>commons-io</artifactId>
	    <version>${commons.io.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.apache.commons</groupId>
	    <artifactId>commons-pool2</artifactId>
	    <version>${commons.pool2.version}</version>
	</dependency>
  	<!-- Apache Commons -->

  	<!-- DNS Java -->
	<dependency>
	    <groupId>dnsjava</groupId>
	    <artifactId>dnsjava</artifactId>
	    <version>${dnsjava.version}</version>
	</dependency>
  	<!-- DNS Java -->

  	<!-- Netty -->
	<dependency>
	    <groupId>io.netty</groupId>
	    <artifactId>netty-all</artifactId>
	    <version>${netty.version}</version>
	</dependency>
  	<!-- Netty -->

  	<!-- Spring Framework -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aop</artifactId>
        <version>${spring.version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-beans</artifactId>
        <version>${spring.version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>${spring.version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-core</artifactId>
        <version>${spring.version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-expression</artifactId>
        <version>${spring.version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-jdbc</artifactId>
        <version>${spring.version}</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-tx</artifactId>
        <version>${spring.version}</version>
    </dependency>
  	<!-- Spring Framework -->

	<!-- Apache Derby -->
	<dependency>
	    <groupId>org.apache.derby</groupId>
	    <artifactId>derby</artifactId>
	    <version>${derby.version}</version>
        <scope>runtime</scope>
	</dependency>
	<dependency>
	    <groupId>org.apache.derby</groupId>
	    <artifactId>derbyclient</artifactId>
	    <version>${derby.version}</version>
        <scope>runtime</scope>
	</dependency>
	<!-- Apache Derby -->

	<!-- H2 Database -->
    <dependency>
        <groupId>com.h2database</groupId>
        <artifactId>h2</artifactId>
        <version>${h2.version}</version>
        <scope>runtime</scope>
    </dependency>
	<!-- H2 Database -->

	<!-- SQLite -->
	<dependency>
	    <groupId>org.xerial</groupId>
	    <artifactId>sqlite-jdbc</artifactId>
	    <version>${sqlite.jdbc.version}</version>
        <scope>runtime</scope>
	</dependency>
	<!-- SQLite -->

	<!-- Jersey -->
<!-- 
    Grizzly HTTP is popular for Jersey, but we already use Netty,
    so we'll use that for the HTTP/REST container instead (see below).
	<dependency>
	    <groupId>org.glassfish.jersey.containers</groupId>
	    <artifactId>jersey-container-grizzly2-http</artifactId>
	    <version>${jersey.version}</version>
	</dependency>
 -->	
 	<dependency>
	    <groupId>org.glassfish.jersey.containers</groupId>
	    <artifactId>jersey-container-netty-http</artifactId>
	    <version>${jersey.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jersey.core</groupId>
	    <artifactId>jersey-server</artifactId>
	    <version>${jersey.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jersey.core</groupId>
	    <artifactId>jersey-client</artifactId>
	    <version>${jersey.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jersey.inject</groupId>
	    <artifactId>jersey-hk2</artifactId>
	    <version>${jersey.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jersey.connectors</groupId>
	    <artifactId>jersey-apache-connector</artifactId>
	    <version>${jersey.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jersey.media</groupId>
	    <artifactId>jersey-media-json-jackson</artifactId>
	    <version>${jersey.version}</version>
	</dependency>
	<!-- Jersey -->

	<!-- JAXB and activation jars required for Java 11 -->
	<dependency>
	    <groupId>javax.xml.bind</groupId>
	    <artifactId>jaxb-api</artifactId>
	    <version>${jaxb.api.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jaxb</groupId>
	    <artifactId>jaxb-core</artifactId>
	    <version>${jaxb.core.version}</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.jaxb</groupId>
	    <artifactId>jaxb-runtime</artifactId>
	    <version>${jaxb.runtime.version}</version>
	</dependency>
	<dependency>
	    <groupId>javax.activation</groupId>
	    <artifactId>activation</artifactId>
	    <version>${activation.version}</version>
	</dependency>
	<dependency>
	    <groupId>javax.annotation</groupId>
	    <artifactId>javax.annotation-api</artifactId>
	    <version>${javax.annotation.version}</version>
	</dependency>
	<!-- JAXB and activation jars required for Java 11 -->

	<!-- HTTP Client for REST client -->
	<dependency>
	    <groupId>org.apache.httpcomponents</groupId>
	    <artifactId>httpclient</artifactId>
	    <version>${httpclient.version}</version>
	</dependency>
	<!-- HTTP Client for REST client -->

	<dependency>
	  <groupId>com.fasterxml.jackson.dataformat</groupId>
	  <artifactId>jackson-dataformat-yaml</artifactId>
	  <version>${jackson.version}</version>
	</dependency>
    <dependency>
      <groupId>io.swagger.core.v3</groupId>
      <artifactId>swagger-jaxrs2</artifactId>
      <version>${swagger.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.ws.rs</groupId>
      <artifactId>javax.ws.rs-api</artifactId>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
      <version>3.1.0</version>
    </dependency>

	<!-- Test dependency jars -->
  	<dependency>
  		<groupId>com.jagornet</groupId>
  		<artifactId>jagornet-dhcp-core</artifactId>
  		<version>${project.version}</version>
		<type>test-jar</type>
		<scope>test</scope>
  	</dependency>
  </dependencies>

	<build>
		<!-- If/when new plugin throws this error:
		"Plugin execution not covered by lifecycle configuration", then see this link:
		https://www.eclipse.org/m2e/documentation/m2e-execution-not-covered.html -->
		<pluginManagement>
		  <plugins>
		    <plugin>
		     <groupId>org.eclipse.m2e</groupId>
		     <artifactId>lifecycle-mapping</artifactId>
		     <version>1.0.0</version>
		     <configuration>
		       <lifecycleMappingMetadata>
		         <pluginExecutions>
		           <pluginExecution>
		             <pluginExecutionFilter>
		               <groupId>io.swagger.core.v3</groupId>
		               <artifactId>swagger-maven-plugin</artifactId>
		               <versionRange>${swagger.version}</versionRange>
		               <goals>
		                 <goal>resolve</goal>
		               </goals>
		             </pluginExecutionFilter>
		             <action>
		               <execute>
		                 <runOnIncremental>false</runOnIncremental>
		               </execute >
		             </action>
		           </pluginExecution>
		         </pluginExecutions>
		       </lifecycleMappingMetadata>
		     </configuration>
		    </plugin>
		  </plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
				  <archive>
				    <manifest>
		              <addClasspath>true</addClasspath>
		              <mainClass>com.jagornet.dhcp.server.JagornetDhcpServer</mainClass>
				      <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
				    </manifest>
				  </archive>
				</configuration>
			</plugin>
	        <plugin>
	          <groupId>com.google.cloud.tools</groupId>
	          <artifactId>jib-maven-plugin</artifactId>
	          <!-- defined in parent pom <version>3.1.4/version> -->
	          <configuration>
				<skip>${skip.jib}</skip>
	            <to>
 	              <image>jagornet/${docker.repo}:${project.version}</image>
 	              <auth>
 	              	<username>${docker.io-auth-username}</username>
 	              	<password>${docker.io-auth-password}</password>
 	              </auth>
  	            </to>
 	            <container>
 	            	<creationTime>USE_CURRENT_TIMESTAMP</creationTime>
 	                <jvmFlags>
 	                  <!-- user.dir=/, so set friendly home dir -->
 	                  <jvmFlag>-Djagornet.dhcp.home=/app</jvmFlag>
 	                </jvmFlags>
 	                <extraClasspath>
 	                	<extraClasspath>/app/config</extraClasspath>
 	                </extraClasspath>
 	            	<mainClass>com.jagornet.dhcp.server.JagornetDhcpServer</mainClass>
 	            	<args>
 	            	  <!-- Initial server config is empty -->
 	            	  <arg>-c</arg>
 	            	  <arg>file:/app/config/dhcpserver-jib.json</arg>
 	            	</args>
 	            	<ports>
 	            	  <port>67/udp</port>	<!-- DHCPv4 Server port -->
 	            	  <port>547/udp</port>	<!-- DHCPv6 Server port -->
 	            	  <port>9067/tcp</port>	<!-- HTTPS/REST -->
 	            	</ports>
 	            </container>
				<extraDirectories>
				  <paths>
				    <!-- Copies from 'config' into '/app/config' on the container. -->
				    <path>
				      <from>config</from>
				      <into>/app/config</into>
				    </path>
				  </paths>
				</extraDirectories>
	          </configuration>
			  <executions>
			    <execution>
			      <phase>package</phase>
			      <goals>
			        <goal>build</goal>
			      </goals>
			    </execution>
			  </executions>
	        </plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-site-plugin</artifactId>
				<version>3.9.0</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-project-info-reports-plugin</artifactId>
				<version>3.0.0</version>
			</plugin>
	        <plugin>
	            <groupId>org.codehaus.mojo</groupId>
	            <artifactId>jaxb2-maven-plugin</artifactId>
	            <!-- 
	            Would like to use 2.5.0 version, which works with Java 11,
	            but since the parent pom.xml defines maven.complier 1.8,
	            then Eclipse will reset the project to use JRE 8, and then
	            then v2.5.0 of this plugin fails for some reason.
	             -->
	            <version>2.3.1</version>
	            <executions>
	                <execution>
	                	<phase>generate-sources</phase>
	                    <id>xjc</id>
	                    <goals>
	                        <goal>xjc</goal>
	                    </goals>
	                </execution>
	            </executions>
	            <configuration>
	            	<sources>
	            		<source>${project.basedir}/src/main/resources/dhcpserver.xsd</source>
	            	</sources>
	            	<!-- xjb can be used to customize the bindings 
	            	<xjbSources>
	            		<source>src/main/resources/dhcpserver.xjb</source>
	            	</xjbSources> 
	            	-->
	                <!-- The package of your generated sources -->
	                <packageName>com.jagornet.dhcp.server.config.xml</packageName>
	            </configuration>
	        </plugin>

            <plugin>
                <groupId>io.swagger.core.v3</groupId>
                <artifactId>swagger-maven-plugin</artifactId>
                <version>${swagger.version}</version>
                <configuration>
                    <outputFileName>openapi</outputFileName>
                    <outputPath>${project.build.directory}/openapi</outputPath>
                    <outputFormat>JSONANDYAML</outputFormat>
                    <configurationFilePath>${project.basedir}/src/main/openapi/openapi-config.yaml</configurationFilePath>
                </configuration>
                <executions>
                    <execution>
                        <phase>compile</phase>
                        <goals>
                            <goal>resolve</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

<!-- Shade plugin creates an uber jar with dependencies

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.3</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                          <goal>shade</goal>
                        </goals>
                        <configuration>
- 
                          <minimizeJar>true</minimizeJar>
			              <filters>
			                <filter>
			                   <artifact>log4j:log4j</artifact>
			                   <includes>
			                       <include>**</include>
			                   </includes>
			                </filter>
			                <filter>
			                   <artifact>commons-logging:commons-logging</artifact>
			                   <includes>
			                       <include>**</include>
			                   </includes>
			                </filter>
			              </filters>
-
 						  <artifactSet>
 						    <excludes>
 						      <exclude>io.netty:netty-all</exclude>
 						    </excludes>
 						  </artifactSet>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
-->

			<plugin>
			    <groupId>org.asciidoctor</groupId>
			    <artifactId>asciidoctor-maven-plugin</artifactId>
			    <version>1.5.6</version>			    
		        <!-- 
                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>1.5.3</version>
                    </dependency>
                </dependencies>
                -->
			    <configuration>
			        <sourceDirectory>src/main/asciidoc</sourceDirectory>
			        <headerFooter>true</headerFooter>
			        <imagesDir>../resources/images</imagesDir> 
			    </configuration>
			    <executions>
			        <execution>
			            <id>output-html</id>
			            <phase>generate-resources</phase>
			            <goals>
			                <goal>process-asciidoc</goal>
			            </goals>
			            <configuration>
			                <sourceHighlighter>coderay</sourceHighlighter>
			                <backend>html</backend>
			                <attributes>
			                    <toc/>
			                    <linkcss>false</linkcss>
			                </attributes>
			            </configuration>
			        </execution>
			        <execution>
			            <id>output-docbook</id>
			            <phase>generate-resources</phase>
			            <goals>
			                <goal>process-asciidoc</goal>
			            </goals>
			            <configuration>
			                <backend>docbook</backend>
			                <doctype>book</doctype>
			            </configuration>
			        </execution>
			        <!-- 
			        <execution>
			            <id>output-pdf</id>
			            <phase>generate-resources</phase>
			            <goals>
			                <goal>process-asciidoc</goal>
			            </goals>
			            <configuration>
			                <backend>pdf</backend>
			            </configuration>
			        </execution>
			        -->
			    </executions>
			</plugin>
			<plugin>
				<groupId>com.agilejava.docbkx</groupId>
				<artifactId>docbkx-maven-plugin</artifactId>
				<version>2.0.14</version>
				<configuration>
				  <sourceDirectory>target/generated-docs</sourceDirectory>
				  <targetDirectory>target/generated-docs</targetDirectory>
				</configuration>
				<executions>
				  <execution>
				    <!-- <phase>generate-sources</phase> -->
				    <phase>process-resources</phase>
				    <goals>
				      <!-- <goal>generate-html</goal> -->
				      <goal>generate-pdf</goal>
				      <!-- <goal>generate-eclipse</goal> -->
				    </goals>
				  </execution>
				</executions>
			</plugin>
 
			<plugin>
	        	<groupId>org.apache.maven.plugins</groupId>
	        	<artifactId>maven-surefire-plugin</artifactId>
	        	<version>3.0.0-M4</version>
	        	<configuration>
			        <systemPropertyVariables>
			            <jagornet.dhcp.home>${project.basedir}</jagornet.dhcp.home>
			        </systemPropertyVariables>
					<additionalClasspathElements>
            			<additionalClasspathElement>${project.basedir}/config</additionalClasspathElement>
          			</additionalClasspathElements>
	        	</configuration>
               <executions>
                    <execution>
                        <phase>test</phase>
                    </execution>
               </executions>
	    	</plugin>
        </plugins>
    </build>
	   
	<reporting>
	  <plugins>
	    <plugin>
	      <groupId>org.apache.maven.plugins</groupId>
	      <artifactId>maven-surefire-report-plugin</artifactId>
	      <version>3.0.0-M4</version>
	    </plugin>
	  </plugins>
	</reporting>
 
</project>