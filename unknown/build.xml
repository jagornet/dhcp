<?xml version="1.0" encoding="UTF-8"?>
<project name="Jagornet DHCP" default="dist" basedir=".">
    <description>
        Ant build file for Jagornet DHCP Server
    </description>
	
  	<!-- set global properties for this build -->
  	<property name="src" location="src"/>
	<property name="docs" location="docs"/>
  	<property name="javadoc" location="docs/javadoc"/>
  	<property name="build" location="build"/>
  	<property name="classes" location="build/classes"/>
  	<property name="dist" location="dist"/>
  	<property name="conf" location="conf"/>
  	<property name="bin" location="bin"/>
	<property name="db" location="db"/>
	<property name="lib" location="lib"/>
	<property name="yajsw" location="bin/yajsw-stable-11.0"/>
  	<property file="build.properties"/>
	
	<echoproperties/>
	
  	<target name="init">
    	<!-- Create the time stamp -->
    	<tstamp/>
    	<!-- Create the build directory structure used by compile -->
    	<mkdir dir="${build}"/>
  		<mkdir dir="${classes}"/>
  	</target>

  	<target name="schema" depends="init"
  		description="compile the schema">

    	<property name="xbean.jar" location="${lib}/xbean-2.5.jar"/>
    		
	  	<!-- define the xbean task -->
	  	<taskdef name="xmlbean" 
	  			classname="org.apache.xmlbeans.impl.tool.XMLBean" 
	  			classpath="${xbean.jar}"/>
  		
  		<!-- we set the schema attribute to the 'conf' directory, which will
  		 cause the XMLBeans schema compiler to compile any .xsd files in
  		 that directory, also including the .xsdconfig file -->
    	<xmlbean javasource="1.5" schema="${conf}" destfile="${lib}/xmltypes.jar">
    		<classpath>
        		<fileset file="${xbean.jar}"/>
	    	</classpath>
	    </xmlbean>
  	</target>		   

  	<target name="compile" depends="init,schema"
        description="compile the source">
    	<!-- Compile the java code from ${src} into ${classes} -->
	    <javac srcdir="${src}" 
  				destdir="${classes}" 
  				source="${build.java.version}" 
  				target="${build.java.version}" 
	    		debug="true">
	    	<classpath>
	        	<fileset dir="${lib}" includes="*.jar"/>
	    	</classpath>
	    </javac>
  		<!-- Copy the context*.xml files to classes so they get put into the jar -->
  		<copy todir="${classes}">
  			<fileset dir="${src}" includes="**/context*.xml"/>
  		</copy>
  	</target>
	
	<target name="jar" depends="compile"
		description="build the jagornet-dhcpserver.jar">
		
	  	<!-- Build the jagornet-dhcpserver-x.y.z.jar file from the class files, but no properties -->
	    <jar destfile="${build}/${product.version}.jar" basedir="${classes}" excludes="*.properties">
	    	<!-- Add the manifest inline to the jar when it is created -->
			<manifest>
		        <attribute name="Main-Class" value="com.jagornet.dhcp.Version"/>
		    	<attribute name="Specification-Title" value="${title}"/>
				<attribute name="Specification-Version" value="${version}"/>
				<attribute name="Specification-Vendor" value="${vendor}"/>
				<attribute name="Implementation-Title" value="${title}"/>
				<attribute name="Implementation-Version" value="${version}"/> 
				<attribute name="Implementation-Vendor" value="${vendor}"/>
			</manifest>
		</jar>
		
		<!-- Remove any previous versions of the jagornet-dhcpserver-x.y.z.jar -->
		<delete>
			<fileset dir="${lib}" includes="${product}*.jar"/>
		</delete>
		
		<copy file="${build}/${product.version}.jar" todir="${lib}"/>
			
	</target>		
	
  	<target name="javadoc" depends="init">
  		<!-- just rebuild the JavaDoc each time -->
	    <delete dir="${javadoc}"/>
	  	<javadoc sourcepath="${src}" destdir="${javadoc}"/>
  	</target>

  	<target name="dist" depends="jar"
        description="generate the distribution" >

  		<delete dir="${dist}"/>
  		
	  	<mkdir dir="${dist}"/>
  		<copy todir="${dist}">
  			<fileset dir="${docs}" includes="*.txt"/>
  		</copy>

  		<mkdir dir="${dist}/lib"/>
	    <copy todir="${dist}/lib">
	    	<fileset dir="${lib}" includes="*.jar,*.so,*.dll,*.jnilib"/>
	    </copy>
	    
  		<mkdir dir="${dist}/docs"/>
  		<copy todir="${dist}/docs">
  			<fileset dir="${docs}" includes="*.html"/>
  		</copy>
  			
	    <mkdir dir="${dist}/conf"/>    
	    <copy todir="${dist}/conf">
	    	<fileset dir="${conf}" includes="*.xml,*.xsd,*.conf,*.properties"/>
	    </copy>
	
	    <mkdir dir="${dist}/bin"/>    
	    <copy todir="${dist}/bin">
	    	<fileset dir="${bin}"/>
	    </copy>
  		
  		<mkdir dir="${dist}/bin/yajsw-stable-11.0"/>
  		<copy todir="${dist}/bin/yajsw-stable-11.0">
  			<fileset dir="${yajsw}"/>
  		</copy>
  		
	    <mkdir dir="${dist}/db"/>    
	    <copy todir="${dist}/db">
	    	<fileset dir="${db}" excludes="derby/**,h2/**,sqlite/**"/>
	    </copy>
	    
	    <mkdir dir="${dist}/log"/>
	
		<tar destfile="${dist}/${product.version}.tar.gz"
			compression="gzip">
		  	<tarfileset dir="${dist}" prefix="${product.version}" mode="755">
			    <include name="bin/dhcpserver"/>
		  	</tarfileset>
		  	<tarfileset dir="${dist}" prefix="${product.version}">
			    <include name="**/*"/>
			    <exclude name="lib/*.dll"/>
			    <exclude name="bin/**/*"/>
			    <exclude name="*.tar"/>
			    <exclude name="*.gz"/>
			    <exclude name="*.zip"/>
		  	</tarfileset>
		</tar>
	
		<zip destfile="${dist}/${product.version}.zip">
			<zipfileset dir="${dist}" prefix="${product.version}">
			    <include name="**/*"/>
				<exclude name="lib/*.so"/>
				<exclude name="lib/*.jnilib"/>
				<exclude name="bin/dhcpserver"/>
				<exclude name="*.tar"/>
			    <exclude name="*.gz"/>
			    <exclude name="*.zip"/>
			</zipfileset>
		</zip>	
  	</target>

	<target name="clean"
		description="clean up" >
    	<!-- Delete the ${build} and ${dist} directory trees -->
    	<delete dir="${build}"/>
    	<delete dir="${dist}"/>
  	</target>
	
</project>
